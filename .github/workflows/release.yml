name: MFinder release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"
  go-version: '1.24.1'
  node-version: '22'
  wails-version: 'latest'

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      # true: 一个失败全终止
      fail-fast: true
      matrix:
        build:
          - os: "windows"
            arch: 'amd64'
            runs-on: 'windows-latest'
          - os: "darwin"
            arch: 'amd64'
            runs-on: 'macos-13'
          - os: "darwin"
            arch: 'arm64'
            runs-on: 'macos-latest'

    runs-on: ${{ matrix.build.runs-on }}
    env:
      CGO_ENABLED: 1
      GOOS: ${{ matrix.build.os }}
      GOARCH: ${{ matrix.build.arch }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set artifact name
        id: set_artifact_name
        shell: bash
        run: |
          artifact_name="${{ format('MFinder_{0}_{1}{2}', matrix.build.os, matrix.build.arch, matrix.build.os == 'windows' && '.exe' || '.app') }}"
          echo "artifact_name=$artifact_name" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.go-version }}

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@${{ env.wails-version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.node-version }}

      - name: Prepare frontend dist directory
        run: |
          mkdir -p frontend/dist
          touch frontend/dist/.placeholder

      - name: Generate Wails bindings
        run: wails generate module

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install --legacy-peer-deps

      - name: Build frontend assets
        working-directory: frontend
        run: npm run build

      - name: Install UPX
        if: matrix.build.os == 'windows'
        uses: crazy-max/ghaction-upx@v3
        with:
          install-only: true

      - name: Build artifact
        env:
          WAILS_SKIP_FRONTEND_INSTALL: "true"
          WAILS_SKIP_FRONTEND_BUILD: "true"
        run: |
          wails build --platform ${{ matrix.build.os }}/${{ matrix.build.arch }} -o ${{ steps.set_artifact_name.outputs.artifact_name }}

      - name: Compress artifact
        if: matrix.build.os != 'darwin'
        run: |
          upx build/bin/* -9

      - name: Zip mac artifact
        if: matrix.build.os == 'darwin'
        run: |
          ditto -c -k --keepParent build/bin/MFinder.app build/bin/${{ steps.set_artifact_name.outputs.artifact_name }}.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set_artifact_name.outputs.artifact_name }}${{ matrix.build.os == 'darwin' && '.zip' || '' }}
          path: build/bin/${{ steps.set_artifact_name.outputs.artifact_name }}${{ matrix.build.os == 'darwin' && '.zip' || '' }}

  release:
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/artifacts

      - name: List artifacts
        run: |
          ls -al artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            artifacts/**
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## MFinder

            MFinder 是一款跨平台的信息收集与指纹识别工具，整合了 FOFA、Hunter、Quake、Shodan 等平台的数据。
            支持备案查询、端口探测、资产分类、微信小程序解包等功能，提供统一的任务编排与批量导出能力。

            本版本发布自动构建的 Windows 与 macOS 安装包，建议阅读仓库 README 了解使用方式与注意事项。
